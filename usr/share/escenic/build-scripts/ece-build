#! /usr/bin/env bash

################################################################################
#
# BUILDER - build server script
#
################################################################################

# common variables
ece_scripts_version="straight-from-github"
ece_scripts_home=/usr/share/escenic/ece-scripts
log=~/ece-build.log

# build related variables
build_date=`date +%F_%H%M`
maven_build_offline=0
maven_opts="clean install"
skip_ear=0
project_pom_versions=""

# standard java locations
java_6_sun=/usr/lib/jvm/java-6-sun
java_7_oracle=/usr/lib/jvm/java-7-oracle

# ece-build platform dependencies
dependencies="tar
sed
ant
git
svn
mvn
zip
unzip
wget
xml2"

# plugins available for inclusion in project build
escenic_identifiers="engine
community-engine
forum
geocode
analysis-engine
xml-editor
menu-editor
section-feed
dashboard
poll
lucy
reporter
video
newsroom
newsgate
vcpeditor
online-graphics
widget-framework-core
widget-framework-common
widget-framework-mobile
widget-framework-community
widget-framework-syndication
mobile-expansion
semantic-cxense
snapshot
"

declare -A project_distributions=()

declare -A maven_coordinates=(
["assemblytool"]="com.escenic.tools:assemblytool:jar"
["engine"]="com.escenic:engine-dist:zip:bin"
["analysis-engine"]="com.escenic.plugins.analysis:analysis-engine:zip"
["dashboard"]="com.escenic.plugins.dashboard:dashboard:zip"
["forum"]="com.escenic.plugins.forum:forum:zip"
["geocode"]="com.escenic.plugins.geocode:geocode-dist:zip"
["lucy"]="com.escenic.plugins.lucy:lucy-dist:zip"
["menu-editor"]="com.escenic.plugins.menu-editor:menu-editor-dist:zip"
["newsroom"]="com.escenic.plugins.newsroom:newsroom-dist:zip"
["newsgate"]="com.escenic.plugins.newsgate:newsgate:zip"
["poll"]="com.escenic.plugins.poll:poll:zip"
["section-feed"]="com.escenic.plugins.section-feed:section-feed-dist:zip"
["semantic-cxense"]="com.escenic.plugins.semantic:semantic-cxense-dist:zip"
["snapshot"]="com.escenic.plugins.snapshot:snapshot-dist:zip"
["community-engine"]="com.escenic.plugins.community:community-engine:zip"
["online-graphics"]="com.escenic.plugins.online-graphics:online-graphics:zip"
["video"]="com.escenic.plugins.video:video:zip"
["xml-editor"]="com.escenic.plugins.xml-editor:xml-editor-dist:zip"
["vcpeditor"]="com.escenic.plugins.vcpeditor:vcpeditor-dist:zip"
["widget-framework-core"]="com.escenic.widget-framework:framework-dist:zip"
["widget-framework-community"]="com.escenic.widget-framework:framework-community-dist:zip"
["widget-framework-mobile"]="com.escenic.widget-framework:framework-mobile-dist:zip"
)

# root folders for engine and plugin distributions
builder_root_dir=/home/builder
builder_engine_dir=$builder_root_dir/engine
builder_plugins_dir=$builder_root_dir/plugins
builder_assemblytool_dir=$builder_root_dir/assemblytool

# local folders for engine and plugin distributions
dists_root_dir=~/.dists
dists_tmp_dir=$dists_root_dir/tmp

# assemblytool root folders
assemblytool_root_dir=~/assemblytool
assemblytool_pub_dir=$assemblytool_root_dir/publications
assemblytool_lib_dir=$assemblytool_root_dir/lib

# user specific variables
conf_file=~/.build/build.conf
maven_conf_file=~/.m2/settings.xml
project_src_dir=~/src
project_assembly_dir=$project_src_dir/project-assembly
project_assembly_target_dir=$project_assembly_dir/target
release_dir=~/releases
plugin_dir=~/plugins
engine_root_dir=~/engine

##
function init
{
  init_failed=0
  if [ ! -d $ece_scripts_home ]; then
    init_failed=1
    error_message="The directory for ece-scripts $ece_scripts_home does not exist, exiting!"
  elif [ ! -e $ece_scripts_home/common-bashing.sh ]; then
    init_failed=1
    error_message="The script $ece_scripts_home/common-bashing.sh does not exist, exiting!"
  elif [ ! -e $ece_scripts_home/common-io.sh ]; then
    init_failed=1
    error_message="The script $ece_scripts_home/common-io.sh does not exist, exiting!"
  fi
  if [ $init_failed -eq 0 ]; then
    source $ece_scripts_home/common-bashing.sh
    source $ece_scripts_home/common-io.sh
  else
    echo "$error_message"
    exit 1
  fi

  # set pid
  pid_file=~/ece-build.pid

  if [ -e $pid_file ]; then
    echo "Instance of $(basename $0) already running!"
    exit 1
  else
    create_pid
  fi
  
  trap common_bashing_exit_hook_with_log_recap EXIT
  trap common_bashing_user_cancelled_hook SIGINT SIGHUP
}

## To make your script call this whenever it does a controlled exit,
## either by running through the script, call this hook.
##
## Put this line at the start of your script:
##
## trap common_bashing_exit_hooki_with_log_recap EXIT
##
## $@ :: signal
function common_bashing_exit_hook_with_log_recap() {
  local RETVAL=$?
  if [ $RETVAL -ne 0 ]; then
    print "BUILD FAILED/CANCELED"
    print "### start tail review of $log ###"
    tail -n 25 $log
    print "### end of review ###"
  fi
  remove_pid
  remove_lock
  kill $$
}

### run
## Runs the passed command & arguments and log both standard error and
## standard out. If the command exits cleanly, the calling code will
## continue, however, if the command you passed to run failed, the run
## wrapper will log the call stack and exit in error.
##
## $@ :: list of strings making up your command. Everything except
##       pipes can be bassed
function run_wrapper() {
  if [ ! -e $log ]; then
    touch $log || {
      echo "Couldn't create $log"
      exit 1
    }
  fi

  "${@}" 1>>$log 2>>$log
  
  local RETVAL=$?
  if [ $RETVAL -ne 0 ]; then
    print_and_log "The command <${@}> run as user $USER $(red FAILED)" \
      "(the command exited with code ${code}), I'll exit now :-("
    exit 1 
  fi
}

##
function fetch_configuration
{
  if [ -e $conf_file ]; then
    source $conf_file
  else
    print_and_log "Your user is missing the $conf_file, exiting!"
    exit 1
  fi 
}

##
function verify_configuration {
  enforce_variable customer "Your $conf_file is missing the variable 'customer', exiting!"
  if [ -z $src_control ]; then
    log "No source control system chosen, I will assume that you are using subversion."
    src_control=svn
    
    enforce_variable svn_base "Your $conf_file is missing the variable 'svn_base', exiting!"
    enforce_variable svn_user "Your $conf_file is missing the variable 'svn_base', exiting!"
    enforce_variable svn_password "Your $conf_file is missing the variable 'svn_password', exiting!"
    
    # append a / to svn_base if not present
    [[ $svn_base != */ ]] && svn_base="$svn_base"/
  elif [[ "$src_control" = "git" ]]; then
    enforce_variable git_base "Your $conf_file is missing the variable 'git_base', exiting!"
    enforce_variable git_user "Your $conf_file is missing the variable 'git_base', exiting!"
    enforce_variable git_password "Your $conf_file is missing the variable 'git_password', exiting!"  
  else
    print_and_log "The chosen source control system $src_control is NOT supported, exiting!"
  fi
}

##
function enforce_variable
{
  if [ ! -n "$(eval echo $`echo $1`)" ]; then
    print_and_log "$2"
    exit 1
  fi
}

##
function verify_dependencies
{
  for f in $dependencies
  do
    verify_command $f
  done
}

##
function verify_command {
  command -v $1 >/dev/null 2>&1 || { print >&2 "I require $1 but it's not installed, exiting!"; exit 1; }
}

##
function verify_java 
{
  if !dpkg-query -W sun-java6-jdk > /dev/null 2>&1; then
    print_and_log "Required package sun-java6-jdk is not installed, exiting!"
    exit 1
  fi
}

##
function get_user_options
{
  while getopts ":b:t:osV" opt; do
    case $opt in
      b)
        svn_path=branches/${OPTARG}
        release_label=branch-${OPTARG}
        ;;
      t)
        svn_path=tags/${OPTARG}
        release_label=tag-${OPTARG}
        ;;
      o)
        maven_build_offline=1
        maven_opts="-o $maven_opts"
        print_and_log "Maven offline mode in effect!"
        ;;
      s)
        skip_ear=1
        print_and_log "Skip .ear mode in effect!"
        ;;
      V)
        echo "Version:" $ece_scripts_version
        exit 0
        ;;
      \?)
        print "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        print "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done
}

##
function symlink_assemblytool
{

  # try and retrieve assemblytool version from project
  for f in $project_pom_versions; do
    if [[ $f == assemblytool=* ]]; then
      local assemblytool_release=`echo $f | sed 's/=/-/g'`
      local assemblytool_link_target=~/$assemblytool_release
      break
    fi
  done

  # differentiate between the old and new setup of assemblytool on builder
  if [ -d $assemblytool_root_dir ] && [ ! -h $assemblytool_root_dir ]; then
    # identify and migrate projects still using the old assemblytool setup
    if [ -z $assemblytool_release ]; then
      print_and_log "Your project should start using <escenic.assemblytool.version> in your pom.xml to be compatible with newer versions of Escenic Content Engine!"
    else
      run_wrapper rm -rf $assemblytool_root_dir
    fi
  elif [ -h $assemblytool_root_dir ]; then
    # remove assemblytool symlink if present
    run_wrapper rm -f $assemblytool_root_dir
  fi

  # standard execution with the assemblytool directory link not yet present
  if [ ! -d $assemblytool_root_dir ]; then
    # fail if assemblytool version has not been specified in pom.xml
    if [ -z $assemblytool_release ]; then
      print_and_log "You need to specify the <escenic.assemblytool.version> in your pom.xml, exiting!"
      exit 1
    elif [ ! -d $assemblytool_link_target ]; then
      print_and_log "Your project requires $assemblytool_release, but it's not present in your home directory, I will try to fetch it from builder..."
      if [ -d $builder_assemblytool_dir/$assemblytool_release ]; then
        run_wrapper cp -r $builder_assemblytool_dir/$assemblytool_release ~/.
        print_and_log "The request $assemblytool_release has been added to your users home directory."
      else
        print_and_log "The requested $assemblytool_release does not exist on the platform and needs to be added by an operator, exiting!"
        exit 1
      fi
    fi
    # create assemblytool symlink based on the request project version
    run_wrapper ln -s $assemblytool_link_target $assemblytool_root_dir
  fi
}

##
function clean_assemblytool
{
  if [ -e "$assemblytool_pub_dir" ]; then
    run_wrapper rm -f $assemblytool_pub_dir/*
  fi
  if [ ! -d $assemblytool_pub_dir ]; then
    make_dir $assemblytool_pub_dir
  fi
  if [ -e "$assemblytool_lib_dir" ]; then
    run_wrapper rm -f $assemblytool_lib_dir/*
  fi
  if [ ! -d $assemblytool_lib_dir ]; then
    make_dir $assemblytool_lib_dir
  fi
}

##
function verify_assemblytool
{
  if [ ! -d $assemblytool_pub_dir ]; then
    make_dir $assemblytool_pub_dir
    print_and_log "$assemblytool_pub_dir did not exist so it has been created."
  fi
  if [ ! -d $assemblytool_lib_dir ]; then
    make_dir $assemblytool_lib_dir
    print_and_log "$assemblytool_lib_dir did not exist so it has been created."
  fi
  if [ ! -d $release_dir ]; then
    make_dir $release_dir
    run_wrapper chmod 775 $release_dir
    print_and_log "$release_dir did not exist so it has been created."
  fi
}

## 
function clean_customer_home
{
  # clean up plugin directory if it exists
  if [ -d "$plugin_dir" ]; then
    run_wrapper rm -rf $plugin_dir/*
  else
    make_dir $plugin_dir
  fi

  # remove engine symlink if it exists 
  if [ -h "$engine_root_dir" ]; then
    run_wrapper rm -f $engine_root_dir
  fi

  # drop and recreate project src directory if it exists
  if [ -d "$project_src_dir" ]; then
    run_wrapper rm -rf $project_src_dir
  else
    make_dir $project_src_dir
  fi
}

##
function add_global_libs
{
  if [ -e $builder_root_dir/lib/java_memcached-release_2.0.1.jar ]; then
    run_wrapper ln -s $builder_root_dir/lib/java_memcached-release_2.0.1.jar $assemblytool_lib_dir/
  else
    print_and_log "The global library $builder_root_dir/lib/java_memcached-release_2.0.1.jar is missing, exiting!"
    exit 1
  fi
  local engine_version=`readlink $engine_root_dir`
  if [ $(echo "$engine_version" | grep "engine-5.3" | wc -l) -gt 0 ]; then
    if [ -e $builder_root_dir/lib/engine-backport-1.0-SNAPSHOT.jar ]; then
      run_wrapper ln -s $builder_root_dir/lib/engine-backport-1.0-SNAPSHOT.jar $assemblytool_lib_dir/
    else
      print_and_log "The global library $builder_root_dir/lib/engine-backport-1.0-SNAPSHOT.jar is missing, exiting!"
      exit 1
    fi
  fi
}


##
function svn_fail_early
{
  if [ -z "$svn_path" ]; then
    svn_path=trunk
    release_label=$svn_path
    log "No svn path chosen, will use 'trunk'."
  fi
  run_wrapper svn checkout --quiet --non-interactive --depth empty --username $svn_user  --password $svn_password $svn_base$svn_path $project_src_dir/.
}

##
function git_checkout
{
  run_wrapper git clone https://$git_user:$git_password@$git_base $project_src_dir
  cd $project_src_dir
  revision=`git describe --always`
  release_label=git
  if [[ $revision = "" ]]; then
    print_and_log "Failed to fetch current revision number, exiting!"
    exit 1
  fi
}

##
function project_verify_assembly
{
  if [[ "$src_control" = "svn" ]]; then
    run_wrapper svn update --quiet --non-interactive --set-depth infinity $project_src_dir/pom.xml $project_src_dir/project-assembly 
  fi
  if [ ! -d $project_assembly_dir ]; then
    print_and_log "Your project does not contain the project-assembly module and is thereby not certified to use the ece-builder, exiting!"
    exit 1
  elif [ ! -e $project_assembly_dir/src/main/assembly/assembly.xml ]; then
    print_and_log "Your project does not have a $project_assembly_dir/src/main/assembly/assembly.xml and is thereby not certified to use the ece-builder, exiting!"
    exit 1
  fi
}

##
function retrieve_project_pom_versions
{
  if [ -e $project_src_dir/pom.xml ];then
    project_pom_versions=`xml2 < $project_src_dir/pom.xml | grep '^/project/properties/escenic\.' | sed -n -e 's,.*properties/escenic\.,,' -e 's,\.version,,p'`
    for f in $project_pom_versions; do
      for g in $escenic_identifiers; do
        if [[ $f == $g=* ]]; then
          project_distributions+=(["$g"]=${f//*=})
        fi
      done
    done
  else
    print_and_log "Your projects pom.xml is missing, exiting!"
    exit 1
  fi
}

##
function mvn_coordinate_to_url
{
  # url to be returned
  local url

  # coordinate is e.g. com.escenic:engine-dist:zip:bin:5.5.2.137014
  # or com.escenic.plugins.forum:forum:zip:3.2.1.132293
  # groupid:artifactid:[packaging:[classifier:]]version
  local coordinate=$1

  # local variables parsed from coordinate
  local groupid
  local artifactid
  local version
  local packaging
  local classifier

  # chomp groupid: --> artifactid:[packaging:[classifier:]]version
  groupid=${coordinate/:*}
  coordinate=${coordinate#${groupid}:}

  # chomp artifactid: --> [packaging:[classifier:]]version
  artifactid=${coordinate/:*}
  coordinate=${coordinate#${artifactid}:}

  # chomp version --> [packaging[:classifier]]
  version=${coordinate/*:}
  coordinate=${coordinate%${version}}
  coordinate=${coordinate%:}

  classifier=
  packaging=

  if [ ! -z "$coordinate" ] ; then
    # chomp packaging --> [classifier]
    packaging=${coordinate/:*}
    coordinate=${coordinate#${packaging}}
    coordinate=${coordinate#:}
  fi

  if [ ! -z "$coordinate" ] ; then
    # chomp classifier
    classifier=$coordinate
    coordinate=
  fi

  echo "${groupid//.//}/${artifactid}/$version/${artifactid}-${version}${classifier:+-${classifier}}.$packaging"

}

##
function set_java_home
{
  project_java_version=`xml2 < $project_src_dir/pom.xml | grep '^/project/build/plugins/plugin/configuration/target=' | sed -n -e 's,.*project/build/plugins/plugin/configuration/target=,,p'`
  if [ -z $project_java_version ]; then
    print_and_log "You need to specify the java taget version for the maven-compiler-plugin in your pom.xml as this is used by this script to determine which java to use, exiting!"
    exit 1
  elif [[ $project_java_version == "1.6" ]]; then
    if [ -d $java_6_sun ]; then
      export JAVA_HOME=$java_6_sun
    else
      print_and_log "The expected home directory, $java_6_sun, for you requested java version does not exist on the platform and needs to be added, exiting!"
      exit 1
    fi
  elif [[ $project_java_version == "1.7" ]]; then
    if [ -d $java_7_oracle ]; then
      export JAVA_HOME=$java_7_oracle
    else
      print_and_log "The expected home directory, $java_7_oracle, for you requested java version does not exist on the platform and needs to be added, exiting!"
      exit 1
    fi
  else
    print_and_log "The requested java version $project_java_version is not supported or has been specified using an incorrect format, exiting!"
  fi
}

##
function fetch_distributions
{
  # create $dists_root_dir if needed
  if [ ! -d $dists_root_dir ]; then
    run_wrapper mkdir -p $dists_root_dir
  fi
  
  # iterate over all known distribution identifiers
  for f in $escenic_identifiers
  do

    # try and fetch the version for the distribution from the pom.xml
    local dist_version=`sed "/<escenic.$f.version>/!d;s/ *<\/\?escenic.$f.version> *//g" $project_src_dir/pom.xml | tr -d $'\r' `
    
    # check if a version was returned from the pom.xml
    if [[ ! $dist_version = "" ]]; then
      
      # check if the distribution is already present in the local dists directory
      if [ ! -d $dists_root_dir/$f-$dist_version ]; then

        # create a url from the maven coordinate of the distribution
        local dist_path=`mvn_coordinate_to_url ${maven_coordinates["$f"]}:$dist_version`
        local artifact_pattern=$f
        local artifact_version=$dist_version
        local target_path=$dists_root_dir
        
        # try and add the distribution
        request_distribution $dist_path
        if [ -e $dists_tmp_dir/distribution.zip ]; then
          run_wrapper cd $dists_tmp_dir
          run_wrapper unzip -q $dists_tmp_dir/distribution.zip
          run_wrapper rm -f $dists_tmp_dir/distribution.zip

          # analyze unpacked resource
          for g in $(ls -d $dists_tmp_dir/*);
          do
            local skip_artifact=0
            local artifact_filename=$(basename "$g")
            echo "$artifact_filename" | grep '[0-9]' | grep -q "$artifact_pattern"
            if [ $? = 0 ]; then
              log "The resulting directory contains numbers and \"$artifact_pattern\" so it is most likely valid."
            else
              echo "$artifact_filename" | grep -q "$artifact_pattern"
              if [ $? = 0 ]; then
                log "$artifact_path was identified as $artifact_pattern, but failed the naming convention test after being unpacked, trying to recover..."
                if [ ! -d $dists_root_dir/$artifact_pattern-$dist_version ]; then
                  log "$artifact_path was recovered as a $artifact_pattern and will be added as $artifact_pattern-$dist_version"
                else
                  log "$artifact_path was identified as $artifact_pattern, but $artifact_pattern-$dist_version already exists so it will not be added."
                  skip_artifact=1
                fi
              else
                log "$g is not a valid artifact, ignoring."
                skip_artifact=1
              fi
            fi
            if [ $skip_artifact -eq 0 ]; then
              run_wrapper mv $g $target_path/$artifact_pattern-$artifact_version
              log "Distribution $artifact_pattern-$artifact_version sucessfully added."
            fi
          done
        else
          log "Download failed! - trying to fallback to old school..."
          if [ -d $builder_plugins_dir/$artifact_pattern-$artifact_version ]; then
            run_wrapper cp -R $builder_plugins_dir/$artifact_pattern-$artifact_version $target_path/$artifact_pattern-$artifact_version
            log "Distribution $artifact_pattern-$artifact_version sucessfully added."
          elif [ -d $builder_engine_dir/$artifact_pattern-$artifact_version ]; then
            run_wrapper cp -R $builder_engine_dir/$artifact_pattern-$artifact_version $target_path/$artifact_pattern-$artifact_version
            log "Distribution $artifact_pattern-$artifact_version sucessfully added."
          else
            print_and_log "Download failed! The distribution named $f with relative path - $dist_path could not be found in any of the repositories. This must be handled by an operator."
            exit 1 
          fi
        fi
      fi
    fi
  done
}

##
function request_distribution
{
  local dist_path=$1
  if [ ! -z $dist_path ]; then
    distribution_exists http://maven.vizrt.com/$dist_path  
    local ret_val=$?
    if [ $ret_val -eq 0 ]; then
      download_distribution http://maven.vizrt.com/$dist_path
    else
      distribution_exists http://maven.vizrt.com/unstable/$dist_path
      local ret_val=$?
      if [ $ret_val -eq 0 ]; then
        download_distribution http://maven.vizrt.com/unstable/$dist_path
      fi      
    fi
  fi
}

##
function distribution_exists
{
  local url=$1
  log "Trying to download - $url"
  wget --spider -q --http-user $maven_user --http-password $maven_password $url
}

##
function download_distribution
{
  # url to download
  local url=$1

  # clean up tmp directory
  if [ -d $dists_tmp_dir ]; then
    run_wrapper rm -rf $dists_tmp_dir
  fi
 
  # re-create tmp directory
  run_wrapper mkdir -p $dists_tmp_dir

  # download the distribution
  run_wrapper wget -q --http-user $maven_user --http-password $maven_password $url -O $dists_tmp_dir/distribution.zip
}

##
function print_unstable_distributions
{
  for f in ${!project_distributions[@]}; do
    local dist_path=`mvn_coordinate_to_url ${maven_coordinates["$f"]}:${project_distributions["$f"]}`
    if [ ! -z $dist_path ]; then
      distribution_exists http://maven.vizrt.com/$dist_path
      if [ $? -ne 0 ]; then
        distribution_exists http://maven.vizrt.com/unstable/$dist_path
        if [ $? -eq 0 ]; then
          print_and_log "WARNING - $f version ${project_distributions["$f"]} is not supported!"
        fi
      fi
    fi
  done
}

##
function symlink_ece_components
{
  for f in $escenic_identifiers
  do
    version=`sed "/<escenic.$f.version>/!d;s/ *<\/\?escenic.$f.version> *//g" $project_src_dir/pom.xml | tr -d $'\r' `
    if [[ ! $version = "" ]]; then
      if [[ "$f" = "engine" ]]; then
        run_wrapper ln -s $dists_root_dir/$f-$version $engine_root_dir 
      else
        run_wrapper ln -s $dists_root_dir/$f-$version $plugin_dir/$f 
      fi
    fi
  done
}

##
function verify_requested_versions
{
  verification_failed=0
  if [ ! -d $engine_root_dir ]; then
    broken_link=`readlink $engine_root_dir`
    print_and_log "The requested engine $broken_link does not exist on the platform and must be added!"
    verification_failed=1
  fi
  for f in $(ls -d $plugin_dir/*);
  do
    if [ ! -d $f ]; then
      broken_link=`readlink $f`
      print_and_log "The requested plugin $broken_link does not exist on the platform and must be added!"
      verification_failed=1
    fi
  done
  if [ $verification_failed -eq 1 ]; then
    print_and_log "You have broken symlinks indicating that some requested version(s) of engine and/or plugins are missing!"
    print_and_log "BUILD FAILED!"
    exit 1
  fi
}

##
function verify_maven_proxy
{
  if [ -e $maven_conf_file ]; then
    maven_credentials=`xml2 < $maven_conf_file | grep '^/settings/servers'`
    stable=vizrt-repo
    process=0
    for f in $maven_credentials; do
      if [[ "$f" == *id=* ]]; then
        local server=`echo $f | sed -n -e 's,.*id=,,p'`
        if [[ "$server" == "$stable" ]]; then
          process=1
        else
          process=0
        fi
      elif [ $process -eq 1 ]; then
        if [[ "$f" == *username=* ]]; then
          maven_user=`echo $f | sed -n -e 's,.*username=,,p'`
        elif [[ "$f" == *password=* ]]; then
          maven_password=`echo $f | sed -n -e 's,.*password=,,p'`
        fi
      fi
    done
    if [[ $maven_user = "" ]] || [[ $maven_password = "" ]]; then
      print_and_log "Your $maven_conf_file is missing the username and/or the password for the maven proxy, exiting!"
      exit 1
    else
      if [ $maven_build_offline -eq 1 ]; then
        print_and_log "Skipping maven proxy verification as you've chosen offline mode!"
      else
        wget --http-user $maven_user --http-password $maven_password http://maven.vizrt.com -qO /dev/null
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
          print_and_log "Your user can't reach http://maven.vizrt.com, exiting!"
          exit 1
        fi
      fi
    fi
  else
    print_and_log "Your user does not have a ~/.m2/settings.xml, exiting!"
    exit 1
  fi
}

## 
function svn_checkout
{
  run_wrapper svn checkout --quiet --non-interactive --depth infinity --username $svn_user --password $svn_password $svn_base$svn_path $project_src_dir/.
  revision=`svn info $project_src_dir | grep -i Revision | awk '{print $2}'`
  if [[ $revision = "" ]]; then
    print_and_log "Failed to fetch current revision number, exiting!"
    exit 1
  fi
}

##
function maven_build
{
  run_wrapper cd $project_src_dir
  run_wrapper mvn -q $maven_opts
}

##
function symlink_project_assembly
{
  run_wrapper cd $project_assembly_target_dir
  run_wrapper unzip -q project-assembly.zip
  # global classpath
  if [ -e "$project_assembly_target_dir/lib" ]; then
    for f in $(ls -d $project_assembly_target_dir/lib/* | grep .jar);
    do 
      run_wrapper ln -s $f $assemblytool_lib_dir;
    done
  fi
  # publications
  if [ -e "$project_assembly_target_dir/wars" ]; then
    for f in $(ls -d $project_assembly_target_dir/wars/* | grep .war);
    do
      run_wrapper ln -s $f $assemblytool_pub_dir;
    done
  fi
  # custom plugins
  if [ -e "$project_assembly_target_dir/plugins" ]; then
    for f in $(ls -d $project_assembly_target_dir/plugins/* | grep .zip);
    do
      run_wrapper unzip $f -d $plugin_dir
    done
  fi
}

##
function generate_publication_properties
{
  for f in $(ls $assemblytool_pub_dir | grep .war)
  do
    echo "source-war:$f
context-root:/${f%.war}" > $assemblytool_pub_dir/${f%.war}.properties
  done
  if [ -d $plugin_dir/dashboard ]; then
    log "Adding an assembly descriptor for Dashboard ..."
    echo "source-war: ../../plugins/dashboard/wars/dashboard-webapp.war
context-root: /dashboard" > $assemblytool_pub_dir/dashboard.properties
  fi
  if [ -d $plugin_dir/newsgate ]; then
    log "Adding an assembly descriptor for Newsgate Webservice ..."
    echo "source-war: ../../plugins/newsgate/webapps/newsgate-webservice.war
context-root: /newsgate-webservice" > $assemblytool_pub_dir/newsgate-webservice.properties
  fi
}

##
function ant_build
{
  run_wrapper cd $assemblytool_root_dir
  run_wrapper ant -q clean ear -DskipRedundancyCheck=true
}

##
function add_distributions_to_ear
{
  if [ -e $assemblytool_root_dir/dist/engine.ear ]; then
    run_wrapper mkdir $assemblytool_root_dir/dist/META-INF
    # iterate over all known distribution identifiers
    for f in $escenic_identifiers
    do
      # try and fetch the version for the distribution from the pom.xml
      local dist_version=`sed "/<escenic.$f.version>/!d;s/ *<\/\?escenic.$f.version> *//g" $project_src_dir/pom.xml | tr -d $'\r' `

      # check if a version was returned from the pom.xml
      if [[ ! $dist_version = "" ]]; then
        echo "${maven_coordinates["$f"]}:$dist_version" >> $assemblytool_root_dir/dist/META-INF/escenic-distributions.txt
      fi
    done
    run_wrapper cd $assemblytool_root_dir/dist
    run_wrapper zip -u $assemblytool_root_dir/dist/engine.ear META-INF/escenic-distributions.txt
  else
    print_and_log "Assemblytool finished, but the .ear is missing, exiting!"
    exit 1
  fi
}

##
function publish_ear 
{
  resulting_ear=$customer-$release_label-rev$revision-$build_date.ear
  if [ -e $assemblytool_root_dir/dist/engine.ear ]; then 
    run_wrapper cp $assemblytool_root_dir/dist/engine.ear $release_dir/$resulting_ear
    
    # remove old style latest link
    if [ -e $release_dir/latest ]; then
      run_wrapper rm -f $release_dir/latest
    fi
    
    # add new latest.ear link
    run_wrapper ln -fs $release_dir/$resulting_ear $release_dir/latest.ear
  else
    print_and_log "I'm done, but the .ear is still missing, exiting!"
    exit 1
  fi
}

## creates DEB and RPM packages with the server configuration for all
## of the machines available in <project>/server-admin/<machine
## instance>
##
## Common files are taken from <project>/server-admin/common.
##
## If <project>/server-admin doesn't exist, the method simply returns.
function create_machine_conf_packages() {
  local conf_dir=$project_src_dir/server-admin
  
  if [ ! -d $conf_dir ]; then
    return
  fi

  if [[ "$src_control" = svn ]]; then
    generate_new_changelog
  fi

  local machine_list=$(
    find $conf_dir -maxdepth 1 -type d | \
      egrep -v "common|.svn" | \
      sed -e "s#$conf_dir##g" -e "s#^/##g" | \
      sort | \
      grep [a-z]
  )

  for machine in $machine_list; do
    # work dir
    local target_dir=$(mktemp -d)

    # /etc/hosts
    mkdir -p $target_dir/etc
    local hosts_output="$(get_etc_hosts_for_machine ${machine} $conf_dir)"
    if [ ! -z "$hosts_output" ]; then
      echo "$hosts_output" > $target_dir/etc/hosts
    fi

    # copy common and machine specific files
    for el in common ${machine}; do
      if [[ -d $conf_dir/$el && \
        $(find $conf_dir/$el -maxdepth 1 | egrep -v ".git|.svn" | wc -l) -gt 1 ]]; then
        run_wrapper cp -rf $conf_dir/$el/* $target_dir/
      fi
    done

    # delete those pesky .svn folders
    find $target_dir -name .svn -type d | xargs rm -rf

    # add the truth
    local file=$project_src_dir/doc/vosa-handbook/create-handbook.conf
    if [ -e $file ]; then
      local dir=$target_dir/etc/vizrt
      run_wrapper mkdir -p $dir
      run_wrapper cp $file $dir/truth.conf
    fi
    
    # mark all files as conf files
    local conffiles_file=$target_dir/DEBIAN/conffiles
    run_wrapper mkdir -p $(dirname $conffiles_file)
    find $target_dir -type f | \
      egrep "etc|conf" | \
      egrep -v DEBIAN | \
      sed "s#$target_dir##" \
      > $conffiles_file
    
    # debian control file
    local control_file=$target_dir/DEBIAN/control
    local package_name=vosa-conf-${machine}
    local package_version=1-${customer}-${release_label}-r${revision}
    cat > $control_file <<EOF
Package: $package_name
Version: $package_version
Section: base
Priority: optional
Architecture: all
Maintainer: ${package_maintainer_name-VizrtOnline} <${package_maintainer_email-vizrt.online@vizrt.com}>
Description: Server configuration for ${machine}
  This package is generated by the Vizrt SaaS script $(basename $0)
  on $HOSTNAME based on the contents of the $(basename $conf_dir)
  directory in the ${USER} user's Version Control System.
EOF

    # changelogs
    local package_changelog_dir=${target_dir}/usr/share/doc/vizrt/$package_name
    make_dir $package_changelog_dir
    local svn_base_dir=$(lowercase $(basename $svn_base))
    local change_log_dir=$HOME/.generate-changelog/${svn_base_dir}/${svn_path}
    
    if [ -d  $change_log_dir ]; then
      run_wrapper cp ${change_log_dir}/* $package_changelog_dir
    fi

    # build the package
    if [ ! -x /usr/bin/dpkg-deb ]; then
      print_and_log "You must have dpkg-deb installed to create packages :-("
      return
    fi
    
    run_wrapper dpkg-deb --build $target_dir
    mv ${target_dir}.deb $target_dir/${package_name}-${package_version}.deb
    
    if [[ -x /usr/bin/alien && -x /usr/bin/fakeroot ]]; then
      (
        run_wrapper cd $target_dir
        run_wrapper fakeroot alien --keep-version --to-rpm --scripts \
          ${package_name}-${package_version}.deb
      )
    else
      print_and_log "You must have 'alien' and 'fakeroot' installed to create RPMs"
    fi

    # move the machine's DEB and RPM packges to the release directory
    run_wrapper mv $target_dir/*.{deb,rpm} $release_dir/
   
    # adding latest links for conf packages
    run_wrapper ln -sf $release_dir/${package_name}-${package_version}.deb $release_dir/${package_name}-latest.deb
    run_wrapper ln -sf $release_dir/${package_name}-${package_version}.rpm $release_dir/${package_name}-latest.rpm
 
    # remove work directory
    run_wrapper rm -rf $target_dir
  done

  print_and_log "Configuration packages available here: " \
    "http://builder.vizrtsaas.com/$customer/releases/vosa-conf-\${HOSTNAME}-${package_version}.deb"
  print_and_log "Replace '\${HOSTNAME}' with any of: [" \
    $machine_list "] for the other machines' conf packages."
}

##
function generate_new_changelog() {
  print_and_log "Generating change log for revision $revision" ...
  (
    cd ${project_src_dir}
    local previous_revision=PREV
    previous_revision=$(
      ls $release_dir/vosa-conf-*-${release_label}-*.deb 2>/dev/null | \
        grep -v latest | \
        sed 's/.*r\([0-9]*\).deb/\1/g' | \
        sort | \
        uniq | \
        tail -1
    )

    # in case we don't have any previous builds, we don't pass
    # anything in the from parameters.
    local from_option=""
    if [ -n "${previous_revision}" ]; then
      from_option="--from $previous_revision"
    fi
    
    run_wrapper generate-changelog \
      --project $(basename $svn_base) \
      --user $svn_user \
      --password $svn_password \
      ${from_option} \
      --to $revision
  )
}

## Generates the /etc/hosts file for the given machine.
## 
## $1 :: the machine name
## $2 :: the server-admin directory
function get_etc_hosts_for_machine() {
  if [ -z "$1" -o -z "$2" ]; then
    return
  fi
  
  local instance=$1
  local files_dir=$2
  
  if [ ! -d $files_dir/common/etc/hosts.d ]; then
    return
  fi

  cat <<EOF
########################################################################
## /etc/hosts generated by $(basename $0) on ${HOSTNAME}
########################################################################
127.0.0.1	localhost
127.0.1.1	${instance}

## The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
########################################################################
EOF

  local find_dirs=${files_dir}/common/etc/hosts.d
  if [ -d ${files_dir}/${instance}/etc/hosts.d ]; then
    find_dirs="$find_dirs ${files_dir}/${instance}/etc/hosts.d"
  fi
  
  find  \
    $find_dirs \
    -maxdepth 1 \
    -type f | while read f; do
    cat <<EOF
## From ${HOSTNAME}:${f}
$(cat $f)

EOF
  done
}

##
function print_result
{
  print_and_log "BUILD SUCCESSFUL! @ $(date)"
  if [ $skip_ear -eq 1 ]; then
    print_and_log "Only configuration packages has been created in this release!"
  else
    print_and_log "You'll find the release here: http://builder.vizrtsaas.com/$customer/releases/$resulting_ear"
  fi
}

##
function phase_startup {
  init
  print_and_log "Starting release creation! @ $(date)"
  print_and_log "Additional output can be found in $log"
  fetch_configuration
  get_user_options "${@}"
}

##
function phase_verify_platform
{
  verify_dependencies
  verify_java
}

##
function phase_verify_user
{
  verify_maven_proxy
  verify_configuration
}

##
function phase_clean_up
{
  clean_customer_home
}

##
function phase_verify_project
{
  if [[ "$src_control" = "git" ]]; then
    git_checkout
  else
    svn_fail_early
  fi
  project_verify_assembly
  retrieve_project_pom_versions
  print_unstable_distributions
  set_java_home
  symlink_assemblytool
  clean_assemblytool
  verify_assemblytool
  fetch_distributions
  symlink_ece_components
  verify_requested_versions
  add_global_libs
}

##
function phase_release
{
  if [[ "$src_control" = "svn" ]]; then
    svn_checkout
  fi
  if [ $skip_ear -eq 0 ]; then
    maven_build
    symlink_project_assembly
    generate_publication_properties
    ant_build
    add_distributions_to_ear
    publish_ear
  else
    print_and_log "Creation of .ear file skipped as requested!"    
  fi
  create_machine_conf_packages
  print_result
}

##
function phase_shutdown
{
  :
}

## ece-build execution
phase_startup "${@}"
phase_verify_platform
phase_verify_user
phase_clean_up
phase_verify_project
phase_release
phase_shutdown
